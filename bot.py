import telebot
from telebot import TeleBot, types
from functions import func_for_watch_descr, show_prices



TOKEN = "6556679332:AAGd4ZDmpWh1O9luTfeUKSGXUjdAAzEPiJ4"
bot = telebot.TeleBot(TOKEN)

HELP_COMMAND = """
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥ 
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/about - –æ –Ω–∞—Å
"""

@bot.message_handler(commands=[ 'help'])
def help_command(message) :
    bot.send_message(message.chat.id, HELP_COMMAND)


@bot.message_handler(commands=['start', 'go'])
def start_handler(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–†—É—Å—Å–∫–∏–π üá∑üá∫')
    btn2 = types.KeyboardButton('English üá¨üáß')
    markup.add (btn1, btn2)
    send_mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}.'
    bot.send_message(message.chat.id, send_mess, parse_mode='html', reply_markup=markup)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.')


@bot.message_handler(commands=['about'])
def about_handler(message):
    bot.send_message(message.chat.id, f'MustaStyle ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –ú—É—Å—Ç–∞—Ñ–æ–π, —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Å—Ç—Ä–∞—Å—Ç—å –∫ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º, –≤—ã—Å–æ–∫–æ–º—É —Å—Ç–∏–ª—é –∏ —É–≤–∞–∂–µ–Ω–∏—é –∫ –≤—Ä–µ–º–µ–Ω–∏.\n\n–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ —á–∞—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª—É–∂–∞—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–∑–º–µ—Ä–∏—Ç–µ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é –≤–∞—à–µ–≥–æ —Å—Ç–∏–ª—è. –í –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ MustaStyle –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏ –º–æ–¥—ã, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏.\n\n–ù–∞—à–∞ —Ü–µ–ª—å - –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä, –∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–∞–∂–µ —Å–∞–º—ã—Ö —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —á–∞—Å–æ–≤. –ö–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–∞ –∏ –ø—Ä–æ—à–ª–∞ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–∂–µ —Å–∞–º—ã—Ö –∏—Å–∫—É—à–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.\n\nMustaStyle –≥–æ—Ä–¥–∏—Ç—Å—è —Å–≤–æ–µ–π –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å—é –∫–∞—á–µ—Å—Ç–≤—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ–±–ª–∞–¥–∞—é—Ç –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Å–æ–≤–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.\n\n–ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤ –≤ MustaStyle - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞, –Ω–æ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Å–≤–æ–π —Å—Ç–∏–ª—å –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –Ω–∞–º, –∏ –º—ã —Å–¥–µ–ª–∞–µ–º –≤–∞—à –≤—ã–±–æ—Ä —á–∞—Å–æ–≤ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º –º–æ–º–µ–Ω—Ç–æ–º.\n\n–í—ã–±–µ—Ä–∏—Ç–µ MustaStyle ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å. –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–º –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–º –º–æ–º–µ–Ω—Ç–æ–º –≤ —Å—Ç–∏–ª–µ MustaStyle.')


@bot.message_handler(func=lambda message: message.text == '–†—É—Å—Å–∫–∏–π üá∑üá∫')
def select_watch(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    select_watch = "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—Ä–º—É —á–∞—Å–æ–≤, –∫–æ—Ç–æ—Ä—É—é –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏."
    btn0 = types.KeyboardButton('MystaStyle')
    btn1 = types.KeyboardButton('Rolex')
    btn2 = types.KeyboardButton('Omega')
    btn3 = types.KeyboardButton('Patek Philippe')
    btn4 = types.KeyboardButton('Audemars Piguet')
    btn5 = types.KeyboardButton('Tag Heuer')
    btn6 = types.KeyboardButton('Seiko')
    btn7 = types.KeyboardButton('Casio')
    btn8 = types.KeyboardButton('Fossil')
    btn9 = types.KeyboardButton('Citizen')
    btn10 = types.KeyboardButton('Timex')
    btn11 = types.KeyboardButton('Swatch')
    btn12 = types.KeyboardButton('Tissot')
    btn13 = types.KeyboardButton('Bulova')
    btn14 = types.KeyboardButton('Michael Kors')
    btn15 = types.KeyboardButton('Apple (Apple Watch)')
    btn16 = types.KeyboardButton('Garmin')
    btn17 = types.KeyboardButton('Hublot')
    btn18 = types.KeyboardButton('Cartier')
    btn19 = types.KeyboardButton('Breitling')
    btn20 = types.KeyboardButton('Vacheron Constantin')
    btn21 = types.KeyboardButton('Longines')
    btn22 = types.KeyboardButton('Jaeger-LeCoultre')
    btn23 = types.KeyboardButton('Panerai')
    btn24 = types.KeyboardButton('IWC Schaffhausen')
    btn25 = types.KeyboardButton('Chopard')
    btn26 = types.KeyboardButton('Blancpain')
    btn27 = types.KeyboardButton('Ulysse Nardin')
    btn28 = types.KeyboardButton('Rado')
    btn29 = types.KeyboardButton('Oris')
    btn30 = types.KeyboardButton('Bell & Ross')
    btn31 = types.KeyboardButton('Maurice Lacroix')
    btn32 = types.KeyboardButton('Baume & Mercier')
    btn33 = types.KeyboardButton('Raymond Weil')
    btn34 = types.KeyboardButton('Girard-Perregaux')
    btn35 = types.KeyboardButton('Sinn')
    btn36 = types.KeyboardButton('Montblanc')
    btn37 = types.KeyboardButton('Victorinox')
    btn38 = types.KeyboardButton('Breguet')
    btn39 = types.KeyboardButton('Zenith')
    btn40 = types.KeyboardButton('Alpina')
    btn41 = types.KeyboardButton('Bulgari')
    btn42 = types.KeyboardButton('Frederique Constant')
    btn43 = types.KeyboardButton('Nomos Glash√ºtte')
    btn44 = types.KeyboardButton('Piaget')
    btn45 = types.KeyboardButton('H. Moser & Cie')
    btn46 = types.KeyboardButton('Richard Mille')
    btn47 = types.KeyboardButton('HYT')
    btn48 = types.KeyboardButton('Corum')
    btn49 = types.KeyboardButton('Shinola')
    btn50 = types.KeyboardButton('DIOR')
    
    markup.add(btn0, btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10, btn11, btn12, btn13, btn14, btn15, btn16, btn17, btn18, btn19, btn20, btn21, btn22, btn23, btn24, btn25, btn26, btn27, btn28, btn29, btn30, btn31, btn32, btn33, btn34, btn35, btn36, btn37, btn38, btn39, btn40, btn41, btn42, btn43, btn44, btn45, btn46, btn47, btn48, btn49, btn50)
    bot.send_message(message.chat.id, select_watch, parse_mode='html', reply_markup=markup)

#MustaStyle
    @bot.message_handler(func=lambda message: message.text == btn0.text)
    def models(message):
        bot.send_message(message.chat.id, '–£—Ö —Ç—ã, MustaStyle ‚Äî —Ç–≤–æ–π –≤—ã–±–æ—Ä! –ú—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ç–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Å—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–≤–æ–µ–º—É –≤–∫—É—Å—É, —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–µ –∏ –±—é–¥–∂–µ—Ç—É. –ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–∞–º –æ —Ç–æ–º, –∫–∞–∫–∏–µ —á–∞—Å—ã —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å, –æ—Å—Ç–∞–≤–∏–≤ –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –î–æ–≤–µ—Ä—å –Ω–∞–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏!')

#Rolex
    @bot.message_handler(func=lambda message: message.text == btn1.text)
    def models(message):
        func_for_watch_descr('Rolex', 
                                'Rolex Submariner',
                                'Rolex Datejust',
                                'Rolex Day-Date',
                                'Rolex GMT-Master II',
                                'Rolex Explorer',
                                'Rolex Yacht-Master',
                                'Rolex Sea-Dweller',
                                'Rolex Daytona',
                                'Rolex Milgauss',
                                'Rolex Oyster Perpetual',
                                '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤', 
                                message)
        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Rolex Submariner','600,000 - 2,700,000 —Ä—É–±.',
                        'Rolex Datejust', '525,000 - 3,750,000 —Ä—É–±.',
                        'Rolex Day-Date', '1,875,000 - 7,500,000 —Ä—É–±', 
                        'Rolex GMT-Master II', '675,000 - 3,750,000 —Ä—É–±.',
                        'Rolex Explorer', '450,000 - 1,875,000 —Ä—É–±.',
                        'Rolex Yacht-Master', '825,000 - 3,750,000 —Ä—É–±',
                        'Rolex Sea-Dweller', '825,000 - 1,500,000 —Ä—É–±.',
                        'Rolex Daytona', '975,000 - 6,000,000 —Ä—É–±',
                        'Rolex Milgauss', '600,000 - 1,500,000 —Ä—É–±.',
                        'Rolex Oyster Perpetual', '375,000 - 1,500,000 —Ä—É–±.',
                        message)
   
#Omega
    @bot.message_handler(func=lambda message: message.text == btn2.text)
    def models(message):
        func_for_watch_descr('Omega',
                            'Omega Seamaster',
                            'Omega Speedmaster',
                            'Omega Constellation',
                            'Omega De Ville',
                            'Omega Aqua Terra',
                            'Omega Globemaster',
                            'Omega Railmaster',
                            'Omega Seamaster Diver 300M',
                            'Omega Seamaster Planet Ocean',
                            'Omega Speedmaster Moonwatch',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Omega Seamaster', '30,000 - 500,000 —Ä—É–±.',
                        'Omega Speedmaster', '40,000 - 600,000 —Ä—É–±.',
                        'Omega Constellation', '25,000 - 400,000 —Ä—É–±.',
                        'Omega De Ville', '20,000 - 350,000 —Ä—É–±.',
                        'Omega Aqua Terra', '30,000 - 550,000 —Ä—É–±.',
                        'Omega Globemaster', '50,000 - 800,000 —Ä—É–±.',
                        'Omega Railmaster', '40,000 - 650,000 —Ä—É–±.',
                        'Omega Seamaster Diver 300M', '35,000 - 600,000 —Ä—É–±.',
                        'Omega Seamaster Planet Ocean', '45,000 - 700,000 —Ä—É–±.',
                        'Omega Speedmaster Moonwatch', '40,000 - 650,000 —Ä—É–±.',
                        message)

#Patek Philippe
    @bot.message_handler(func=lambda message: message.text == btn3.text)
    def models(message):
        func_for_watch_descr('Patek Philippe', 
                            'Patek Philippe Calatrava',
                            'Patek Philippe Nautilus',
                            'Patek Philippe Aquanaut',
                            'Patek Philippe Grand Complications',
                            'Patek Philippe Twenty-4',
                            'Patek Philippe Complications',
                            'Patek Philippe Golden Ellipse',
                            'Patek Philippe Gondolo',
                            'Patek Philippe World Time',
                            'Patek Philippe Sky Moon Tourbillon',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤', 
                            message)
                            
        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Patek Philippe Calatrava', '1,500,000 - 3,750,000 —Ä—É–±.',
                        'Patek Philippe Nautilus', '2,250,000 - 22,500,000 —Ä—É–±.',
                        'Patek Philippe Aquanaut', '3,000,000 - 15,000,000 —Ä—É–±.',
                        'Patek Philippe Grand Complications', '7,500,000 - –º–Ω–æ–≥–æ–º–∏–ª–ª–∏–æ–Ω–Ω—ã–µ —Ä—É–±.',
                        'Patek Philippe Twenty-4', '750,000 - 3,750,000 —Ä—É–±.',
                        'Patek Philippe Complications', '3,750,000 - 37,500,000 —Ä—É–±.',
                        'Patek Philippe Golden Ellipse', '1,500,000 - 7,500,000 —Ä—É–±.',
                        'Patek Philippe Gondolo', '1,500,000 - 7,500,000 —Ä—É–±.',
                        'Patek Philippe World Time', '3,750,000 - 15,000,000 —Ä—É–±.',
                        'Patek Philippe Sky Moon Tourbillon', '75,000,000 - –º–Ω–æ–≥–æ–º–∏–ª–ª–∏–æ–Ω–Ω—ã–µ —Ä—É–±.',
                        message)

#Audemars Piguet
    @bot.message_handler(func=lambda message: message.text == btn4.text)
    def models(message):
        func_for_watch_descr('Audemars Piguet',
                            'Audemars Piguet Royal Oak',
                            'Audemars Piguet Royal Oak Offshore',
                            'Audemars Piguet Royal Oak Concept',
                            'Audemars Piguet Millenary',
                            'Audemars Piguet Jules Audemars',
                            'Audemars Piguet Haute Joaillerie',
                            'Audemars Piguet Code 11.59',
                            'Audemars Piguet Edward Piguet',
                            'Audemars Piguet Tradition',
                            'Audemars Piguet Royal Oak Tourbillon',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Audemars Piguet Royal Oak', '1,000,000 - 20,000,000 —Ä—É–±.',
                        'Audemars Piguet Royal Oak Offshore', '1,500,000 - 25,000,000 —Ä—É–±.',
                        'Audemars Piguet Royal Oak Concept', '3,000,000 - 30,000,000 —Ä—É–±.',
                        'Audemars Piguet Millenary', '750,000 - 10,000,000 —Ä—É–±.',
                        'Audemars Piguet Jules Audemars', '1,200,000 - 15,000,000 —Ä—É–±.',
                        'Audemars Piguet Haute Joaillerie', '5,000,000 - –º–Ω–æ–≥–æ–º–∏–ª–ª–∏–æ–Ω–Ω—ã–µ —Ä—É–±.',
                        'Audemars Piguet Code 11.59', '2,000,000 - 25,000,000 —Ä—É–±.',
                        'Audemars Piguet Edward Piguet', '1,500,000 - 18,000,000 —Ä—É–±.',
                        'Audemars Piguet Tradition', '800,000 - 12,000,000 —Ä—É–±.',
                        'Audemars Piguet Royal Oak Tourbillon', '3,500,000 - 40,000,000 —Ä—É–±.',
                        message)

#Tag Heuer
    @bot.message_handler(func=lambda message: message.text == btn5.text)
    def models(message):
        func_for_watch_descr('Tag Heuer',
                            'Tag Heuer Carrera',
                            'Tag Heuer Monaco',
                            'Tag Heuer Aquaracer',
                            'Tag Heuer Formula 1',
                            'Tag Heuer Connected',
                            'Tag Heuer Autavia',
                            'Tag Heuer Link',
                            'Tag Heuer Kirium',
                            'Tag Heuer Carrera Heuer 02',
                            'Tag Heuer Carrera Calibre 16',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Tag Heuer Carrera', '50,000 - 500,000 —Ä—É–±.',
                        'Tag Heuer Monaco', '60,000 - 600,000 —Ä—É–±.',
                        'Tag Heuer Aquaracer', '40,000 - 400,000 —Ä—É–±.',
                        'Tag Heuer Formula 1', '30,000 - 300,000 —Ä—É–±.',
                        'Tag Heuer Connected', '70,000 - 700,000 —Ä—É–±.',
                        'Tag Heuer Autavia', '55,000 - 550,000 —Ä—É–±.',
                        'Tag Heuer Link', '45,000 - 450,000 —Ä—É–±.',
                        'Tag Heuer Kirium', '40,000 - 400,000 —Ä—É–±.',
                        'Tag Heuer Carrera Heuer 02', '65,000 - 650,000 —Ä—É–±.',
                        'Tag Heuer Carrera Calibre 16', '60,000 - 600,000 —Ä—É–±.',
                        message)

#Seiko
    @bot.message_handler(func=lambda message: message.text == btn6.text)
    def models(message):
        func_for_watch_descr('Seiko',
                            'Seiko Presage',
                            'Seiko Prospex',
                            'Seiko Astron',
                            'Seiko 5',
                            'Seiko Premier',
                            'Seiko Velatura',
                            'Seiko Recraft',
                            'Seiko Ananta',
                            'Seiko Brightz',
                            'Seiko Lukia',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Seiko Presage', '20,000 - 200,000 —Ä—É–±.',
                        'Seiko Prospex', '30,000 - 300,000 —Ä—É–±.',
                        'Seiko Astron', '50,000 - 500,000 —Ä—É–±.',
                        'Seiko 5', '10,000 - 100,000 —Ä—É–±.',
                        'Seiko Premier', '40,000 - 400,000 —Ä—É–±.',
                        'Seiko Velatura', '25,000 - 250,000 —Ä—É–±.',
                        'Seiko Recraft', '15,000 - 150,000 —Ä—É–±.',
                        'Seiko Ananta', '60,000 - 600,000 —Ä—É–±.',
                        'Seiko Brightz', '45,000 - 450,000 —Ä—É–±.',
                        'Seiko Lukia', '35,000 - 350,000 —Ä—É–±.',
                        message)

#Casio
    @bot.message_handler(func=lambda message: message.text == btn7.text)
    def models(message):
        func_for_watch_descr('Casio',
                            'Casio G-Shock',
                            'Casio Edifice',
                            'Casio Pro Trek',
                            'Casio Vintage',
                            'Casio Baby-G',
                            'Casio Wave Ceptor',
                            'Casio Illuminator',
                            'Casio Databank',
                            'Casio Beside',
                            'Casio Sheen',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Casio G-Shock', '5,000 - 50,000 —Ä—É–±.',
                        'Casio Edifice', '10,000 - 100,000 —Ä—É–±.',
                        'Casio Pro Trek', '15,000 - 150,000 —Ä—É–±.',
                        'Casio Vintage', '3,000 - 30,000 —Ä—É–±.',
                        'Casio Baby-G', '4,000 - 40,000 —Ä—É–±.',
                        'Casio Wave Ceptor', '7,000 - 70,000 —Ä—É–±.',
                        'Casio Illuminator', '2,000 - 20,000 —Ä—É–±.',
                        'Casio Databank', '2,500 - 25,000 —Ä—É–±.',
                        'Casio Beside', '6,000 - 60,000 —Ä—É–±.',
                        'Casio Sheen', '8,000 - 80,000 —Ä—É–±.',
                        message)

#Fossil
    @bot.message_handler(func=lambda message: message.text == btn8.text)
    def models(message):
        func_for_watch_descr('Fossil',
                            'Fossil Gen 6',
                            'Fossil Hybrid HR HR Collider',
                            'Fossil Solar',
                            'Fossil The Carlyle HR',
                            'Fossil Monroe',
                            'Fossil Nate',
                            'Fossil Machine',
                            'Fossil Forrester',
                            'Fossil The Minimalist',
                            'Fossil Neutra',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Fossil Gen 6', '15,000 - 35,000 —Ä—É–±.',
                        'Fossil Hybrid HR Collider', '10,000 - 25,000 —Ä—É–±.',
                        'Fossil Solar', '12,000 - 30,000 —Ä—É–±.',
                        'Fossil The Carlyle HR', '14,000 - 40,000 —Ä—É–±.',
                        'Fossil Monroe', '7,000 - 20,000 —Ä—É–±.',
                        'Fossil Nate', '9,000 - 22,000 —Ä—É–±.',
                        'Fossil Machine', '8,000 - 18,000 —Ä—É–±.',
                        'Fossil Forrester', '10,000 - 24,000 —Ä—É–±.',
                        'Fossil The Minimalist', '6,000 - 15,000 —Ä—É–±.',
                        'Fossil Neutra', '5,000 - 12,000 —Ä—É–±.',
                        message)

#Citizen
    @bot.message_handler(func=lambda message: message.text == btn9.text)
    def models(message):
        func_for_watch_descr('Citizen',
                            'Citizen Eco-Drive',
                            'Citizen Promaster',
                            'Citizen Chandler',
                            'Citizen L',
                            'Citizen Satellite Wave',
                            'Citizen Signature Collection',
                            'Citizen Corso',
                            'Citizen Paradigm',
                            'Citizen Brycen',
                            'Citizen Nighthawk',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Citizen Eco-Drive', '10,000 - 30,000 —Ä—É–±.',
                        'Citizen Promaster', '15,000 - 50,000 —Ä—É–±.',
                        'Citizen Chandler', '7,000 - 20,000 —Ä—É–±.',
                        'Citizen L', '20,000 - 60,000 —Ä—É–±.',
                        'Citizen Satellite Wave', '25,000 - 70,000 —Ä—É–±.',
                        'Citizen Signature Collection', '30,000 - 80,000 —Ä—É–±.',
                        'Citizen Corso', '12,000 - 40,000 —Ä—É–±.',
                        'Citizen Paradigm', '18,000 - 50,000 —Ä—É–±.',
                        'Citizen Brycen', '15,000 - 45,000 —Ä—É–±.',
                        'Citizen Nighthawk', '20,000 - 55,000 —Ä—É–±.',
                        message)

#Timex
    @bot.message_handler(func=lambda message: message.text == btn10.text)
    def models(message):
        func_for_watch_descr('Timex',
                            'Timex Expedition',
                            'Timex Weekender',
                            'Timex Ironman',
                            'Timex Fairfield',
                            'Timex Metropolitan',
                            'Timex Waterbury',
                            'Timex Marlin',
                            'Timex Standard',
                            'Timex Allied',
                            'Timex Navi',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Timex Expedition', '3,000 - 10,000 —Ä—É–±.',
                        'Timex Weekender', '2,000 - 7,000 —Ä—É–±.',
                        'Timex Ironman', '4,000 - 15,000 —Ä—É–±.',
                        'Timex Fairfield', '3,000 - 12,000 —Ä—É–±.',
                        'Timex Metropolitan', '5,000 - 20,000 —Ä—É–±.',
                        'Timex Waterbury', '6,000 - 25,000 —Ä—É–±.',
                        'Timex Marlin', '8,000 - 30,000 —Ä—É–±.',
                        'Timex Standard', '4,000 - 18,000 —Ä—É–±.',
                        'Timex Allied', '5,000 - 22,000 —Ä—É–±.',
                        'Timex Navi', '7,000 - 28,000 —Ä—É–±.',
                        message)

#Swatch
    @bot.message_handler(func=lambda message: message.text == btn11.text)
    def models(message):
            func_for_watch_descr('Swatch',
                                'Swatch Sistem51',
                                'Swatch Originals',
                                'Swatch Irony',
                                'Swatch Skin',
                                'Swatch Scuba Libre',
                                'Swatch Big Bold',
                                'Swatch X 007',
                                'Swatch X You',
                                'Swatch Art Specials',
                                'Swatch POP',
                                '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                                message)

            @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
            def prices(message):
                show_prices('Swatch Sistem51', '5,000 - 15,000 —Ä—É–±.',
                            'Swatch Originals', '3,000 - 10,000 —Ä—É–±.',
                            'Swatch Irony', '4,000 - 12,000 —Ä—É–±.',
                            'Swatch Skin', '6,000 - 18,000 —Ä—É–±.',
                            'Swatch Scuba Libre', '7,000 - 20,000 —Ä—É–±.',
                            'Swatch Big Bold', '8,000 - 25,000 —Ä—É–±.',
                            'Swatch X 007', '10,000 - 30,000 —Ä—É–±.',
                            'Swatch X You', '6,000 - 15,000 —Ä—É–±.',
                            'Swatch Art Specials', '7,000 - 18,000 —Ä—É–±.',
                            'Swatch POP', '3,000 - 10,000 —Ä—É–±.',
                            message)

#Tissot
    @bot.message_handler(func=lambda message: message.text == btn12.text)
    def models(message):
        func_for_watch_descr('Tissot',
                            'Tissot Le Locle',
                            'Tissot T-Touch',
                            'Tissot Visodate',
                            'Tissot PRS 516',
                            'Tissot V8',
                            'Tissot Carson',
                            'Tissot Couturier',
                            'Tissot Tradition',
                            'Tissot Heritage',
                            'Tissot Seastar 1000',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Tissot Le Locle', '15,000 - 40,000 —Ä—É–±.',
                        'Tissot T-Touch', '30,000 - 80,000 —Ä—É–±.',
                        'Tissot Visodate', '20,000 - 50,000 —Ä—É–±.',
                        'Tissot PRS 516', '25,000 - 60,000 —Ä—É–±.',
                        'Tissot V8', '18,000 - 45,000 —Ä—É–±.',
                        'Tissot Carson', '22,000 - 55,000 —Ä—É–±.',
                        'Tissot Couturier', '28,000 - 70,000 —Ä—É–±.',
                        'Tissot Tradition', '12,000 - 35,000 —Ä—É–±.',
                        'Tissot Heritage', '40,000 - 100,000 —Ä—É–±.',
                        'Tissot Seastar 1000', '35,000 - 90,000 —Ä—É–±.',
                        message)

#Bulova
    @bot.message_handler(func=lambda message: message.text == btn13.text)
    def models(message):
        func_for_watch_descr('Bulova',
                            'Bulova Precisionist',
                            'Bulova Marine Star',
                            'Bulova Lunar Pilot',
                            'Bulova Curv',
                            'Bulova Accutron',
                            'Bulova Sutton',
                            'Bulova Wilton',
                            'Bulova Maquina',
                            'Bulova Computron',
                            'Bulova Aerojet',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Bulova Precisionist', '25,000 - 60,000 —Ä—É–±.',
                        'Bulova Marine Star', '30,000 - 70,000 —Ä—É–±.',
                        'Bulova Lunar Pilot', '40,000 - 90,000 —Ä—É–±.',
                        'Bulova Curv', '35,000 - 80,000 —Ä—É–±.',
                        'Bulova Accutron', '50,000 - 100,000 —Ä—É–±.',
                        'Bulova Sutton', '20,000 - 45,000 —Ä—É–±.',
                        'Bulova Wilton', '15,000 - 35,000 —Ä—É–±.',
                        'Bulova Maquina', '10,000 - 25,000 —Ä—É–±.',
                        'Bulova Computron', '25,000 - 55,000 —Ä—É–±.',
                        'Bulova Aerojet', '18,000 - 40,000 —Ä—É–±.',
                        message)

#Michael Kors
    @bot.message_handler(func=lambda message: message.text == btn14.text)
    def models(message):
        func_for_watch_descr('Michael Kors',
                            'Michael Kors Access Runway',
                            'Michael Kors Lexington',
                            'Michael Kors Parker',
                            'Michael Kors Bradshaw',
                            'Michael Kors Sofie',
                            'Michael Kors Pyper',
                            'Michael Kors Darci',
                            'Michael Kors Jaryn',
                            'Michael Kors Blair',
                            'Michael Kors Mini Slim Runway',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('Michael Kors Access Runway', '15,000 - 35,000 —Ä—É–±.',
                        'Michael Kors Lexington', '18,000 - 40,000 —Ä—É–±.',
                        'Michael Kors Parker', '12,000 - 30,000 —Ä—É–±.',
                        'Michael Kors Bradshaw', '20,000 - 50,000 —Ä—É–±.',
                        'Michael Kors Sofie', '25,000 - 60,000 —Ä—É–±.',
                        'Michael Kors Pyper', '10,000 - 25,000 —Ä—É–±.',
                        'Michael Kors Darci', '22,000 - 55,000 —Ä—É–±.',
                        'Michael Kors Jaryn', '14,000 - 35,000 —Ä—É–±.',
                        'Michael Kors Blair', '28,000 - 70,000 —Ä—É–±.',
                        'Michael Kors Mini Slim Runway', '18,000 - 45,000 —Ä—É–±.',
                        message)

#DIOR
    @bot.message_handler(func=lambda message: message.text == btn15.text)
    def models(message):
        func_for_watch_descr('DIOR',
                            'DIOR VIII Montaigne',
                            'DIOR VIII Grand Bal',
                            'DIOR Chiffre Rouge',
                            'La D de DIOR',
                            'DIOR Grand Soir',
                            'DIOR Christal',
                            'DIOR Vortex',
                            'DIOR Invers√©',
                            'DIOR Mini D',
                            'La Mini D de DIOR',
                            '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤',
                            message)

        @bot.message_handler(func=lambda message: message.text.lower() == '—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —á–∞—Å–æ–≤')
        def prices(message):
            show_prices('DIOR VIII Montaigne', '100,000 - 1,000,000 —Ä—É–±.',
                        'DIOR VIII Grand Bal', '150,000 - 2,000,000 —Ä—É–±.',
                        'DIOR Chiffre Rouge', '80,000 - 800,000 —Ä—É–±.',
                        'La D de DIOR', '120,000 - 1,200,000 —Ä—É–±.',
                        'DIOR Grand Soir', '200,000 - 2,500,000 —Ä—É–±.',
                        'DIOR Christal', '90,000 - 1,000,000 —Ä—É–±.',
                        'DIOR Vortex', '180,000 - 2,000,000 —Ä—É–±.',
                        'DIOR Invers√©', '150,000 - 1,500,000 —Ä—É–±.',
                        'DIOR Mini D', '70,000 - 800,000 —Ä—É–±.',
                        'La Mini D de DIOR', '60,000 - 700,000 —Ä—É–±.',
                        message)


bot.polling(none_stop=True)
