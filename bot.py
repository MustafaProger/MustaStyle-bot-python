import telebot
from telebot import types
from base_watches import base_watches

TOKEN = "6556679332:AAGd4ZDmpWh1O9luTfeUKSGXUjdAAzEPiJ4"
bot = telebot.TeleBot(TOKEN)

HELP_COMMAND = """
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥ 
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/about - –æ –Ω–∞—Å
"""

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, HELP_COMMAND)

@bot.message_handler(commands=['start', 'go'])
def start_handler(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–†—É—Å—Å–∫–∏–π üá∑üá∫')
    btn2 = types.KeyboardButton('English üá¨üáß')
    markup.add(btn1, btn2)
    send_mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}.'
    bot.send_message(message.chat.id, send_mess, parse_mode='html', reply_markup=markup)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.')

@bot.message_handler(commands=['about'])
def about_handler(message):
    bot.send_message(message.chat.id, f'MustaStyle ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –ú—É—Å—Ç–∞—Ñ–æ–π, —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Å—Ç—Ä–∞—Å—Ç—å –∫ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º, –≤—ã—Å–æ–∫–æ–º—É —Å—Ç–∏–ª—é –∏ —É–≤–∞–∂–µ–Ω–∏—é –∫ –≤—Ä–µ–º–µ–Ω–∏.\n\n–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ —á–∞—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª—É–∂–∞—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–∑–º–µ—Ä–∏—Ç–µ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é –≤–∞—à–µ–≥–æ —Å—Ç–∏–ª—è. –í –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ MustaStyle –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏ –º–æ–¥—ã, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏.\n\n–ù–∞—à–∞ —Ü–µ–ª—å - –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä, –∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–∞–∂–µ —Å–∞–º—ã—Ö —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —á–∞—Å–æ–≤. –ö–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–∞ –∏ –ø—Ä–æ—à–ª–∞ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–∂–µ —Å–∞–º—ã—Ö –∏—Å–∫—É—à–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.\n\nMustaStyle –≥–æ—Ä–¥–∏—Ç—Å—è —Å–≤–æ–µ–π –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å—é –∫–∞—á–µ—Å—Ç–≤—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ–±–ª–∞–¥–∞—é—Ç –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Å–æ–≤–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.\n\n–ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤ –≤ MustaStyle - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞, –Ω–æ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Å–≤–æ–π —Å—Ç–∏–ª—å –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –Ω–∞–º, –∏ –º—ã —Å–¥–µ–ª–∞–µ–º –≤–∞—à –≤—ã–±–æ—Ä —á–∞—Å–æ–≤ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º –º–æ–º–µ–Ω—Ç–æ–º.\n\n–í—ã–±–µ—Ä–∏—Ç–µ MustaStyle ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å. –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–º –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–º –º–æ–º–µ–Ω—Ç–æ–º –≤ —Å—Ç–∏–ª–µ MustaStyle.')


@bot.message_handler(func=lambda message: message.text == '–†—É—Å—Å–∫–∏–π üá∑üá∫')
def select_watch(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    select_watch = "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—Ä–º—É —á–∞—Å–æ–≤, –∫–æ—Ç–æ—Ä—É—é –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏."
    btn0 = types.KeyboardButton('MystaStyle')
    btn1 = types.KeyboardButton('Rolex')
    btn2 = types.KeyboardButton('Omega')
    btn3 = types.KeyboardButton('Patek Philippe')
    btn4 = types.KeyboardButton('Audemars Piguet')
    btn5 = types.KeyboardButton('Tag Heuer')
    btn6 = types.KeyboardButton('Seiko')
    btn7 = types.KeyboardButton('Casio')
    btn8 = types.KeyboardButton('Fossil')
    btn9 = types.KeyboardButton('Citizen')
    btn10 = types.KeyboardButton('Timex')
    btn11 = types.KeyboardButton('Swatch')
    btn12 = types.KeyboardButton('Tissot')
    btn13 = types.KeyboardButton('Bulova')
    btn14 = types.KeyboardButton('Michael Kors')
    btn15 = types.KeyboardButton('DIOR')

    markup.add(btn0, btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10, btn11, btn12, btn13, btn14, btn15)
    bot.send_message(message.chat.id, select_watch, parse_mode='html', reply_markup=markup)


    def create_company_handler(company, models):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = [types.KeyboardButton(model) for model in models]
        markup.add(*buttons)

        url_markup =  types.InlineKeyboardMarkup()
        url_btns = types.InlineKeyboardButton('–û–§–û–†–ú–ò–¢–¨', url='https://mustafapulse.ru/')
        url_markup.add(url_btns)
        

        @bot.message_handler(func=lambda message, comp=company: message.text == comp)
        def handle_company(message):
            bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ, {message.from_user.first_name}, –≤–∞—à –≤—ã–±–æ—Ä –ø–∞–ª –Ω–∞ —Ñ–∏—Ä–º—É {company}.')
            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —á–∞—Å–æ–≤.', parse_mode='html', reply_markup=markup)

            def show_prices(message, company, models):
                formatted_prices = "\n".join(f"<b>{i + 1}. {model}</b>\n    <i>{price}</i>" for i, (model, price) in enumerate(models.items(), start=0))
                bot.send_message(message.chat.id, f"–¶–µ–Ω—ã –Ω–∞ —á–∞—Å—ã –æ—Ç {company}:\n{formatted_prices}", parse_mode='html')
            show_prices(message, company, models)

        @bot.message_handler(func=lambda message, comp=company, mods=models: message.text in [model for model in mods])
        def send_mess(message, comp=company, mods=models):
            chosen_model = next((model for model in mods if message.text == model), None)
            if chosen_model:
                price_range = mods[chosen_model]
                bot.send_message(message.chat.id, f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í–∞—à –≤—ã–±–æ—Ä –ø–∞–ª –Ω–∞ –º–æ–¥–µ–ª—å —á–∞—Å–æ–≤ {chosen_model}, —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö {price_range} –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏. –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å–µ–π—á–∞—Å?)", reply_markup=url_markup)

    for company, models in base_watches.items():
        create_company_handler(company, models)

    @bot.message_handler(func=lambda message: message.text == btn0.text)
    def models(message):

        url_markup =  types.InlineKeyboardMarkup()
        url_btns = types.InlineKeyboardButton('–û–§–û–†–ú–ò–¢–¨', url='https://mustafapulse.ru/')
        url_markup.add(url_btns)

        bot.send_message(message.chat.id, '–£—Ö —Ç—ã, MustaStyle ‚Äî —Ç–≤–æ–π –≤—ã–±–æ—Ä! –ú—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ç–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Å—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–≤–æ–µ–º—É –≤–∫—É—Å—É, —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–µ –∏ –±—é–¥–∂–µ—Ç—É. –ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–∞–º –æ —Ç–æ–º, –∫–∞–∫–∏–µ —á–∞—Å—ã —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å, –æ—Å—Ç–∞–≤–∏–≤ –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –î–æ–≤–µ—Ä—å –Ω–∞–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏!', reply_markup=url_markup)











@bot.message_handler(func=lambda message: message.text == 'English üá¨üáß')
def select_watch(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    select_watch = "Now select the watch company that you would like to purchase."
    btn0 = types.KeyboardButton('MystaStyle')
    btn1 = types.KeyboardButton('Rolex')
    btn2 = types.KeyboardButton('Omega')
    btn3 = types.KeyboardButton('Patek Philippe')
    btn4 = types.KeyboardButton('Audemars Piguet')
    btn5 = types.KeyboardButton('Tag Heuer')
    btn6 = types.KeyboardButton('Seiko')
    btn7 = types.KeyboardButton('Casio')
    btn8 = types.KeyboardButton('Fossil')
    btn9 = types.KeyboardButton('Citizen')
    btn10 = types.KeyboardButton('Timex')
    btn11 = types.KeyboardButton('Swatch')
    btn12 = types.KeyboardButton('Tissot')
    btn13 = types.KeyboardButton('Bulova')
    btn14 = types.KeyboardButton('Michael Kors')
    btn15 = types.KeyboardButton('DIOR')

    markup.add(btn0, btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10, btn11, btn12, btn13, btn14, btn15)
    bot.send_message(message.chat.id, select_watch, parse_mode='html', reply_markup=markup)


    def create_company_handler(company, models):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = [types.KeyboardButton(model) for model in models]
        markup.add(*buttons)

        url_markup =  types.InlineKeyboardMarkup()
        url_btns = types.InlineKeyboardButton('PLACE AN ORDER', url='https://mustafapulse.ru/')
        url_markup.add(url_btns)
        

        @bot.message_handler(func=lambda message, comp=company: message.text == comp)
        def handle_company(message):
            bot.send_message(message.chat.id, f'Great, {message.from_user.first_name}, your choice fell on the company {company}.')
            bot.send_message(message.chat.id, 'Now select the watch model.', parse_mode='html', reply_markup=markup)

            def show_prices(message, company, models):
                formatted_prices = "\n".join(f"<b>{i + 1}. {model}</b>\n    <i>{price}</i>" for i, (model, price) in enumerate(models.items(), start=0))
                bot.send_message(message.chat.id, f"Prices for watches from {company}:\n{formatted_prices}", parse_mode='html')
            show_prices(message, company, models)

        @bot.message_handler(func=lambda message, comp=company, mods=models: message.text in [model for model in mods])
        def send_mess(message, comp=company, mods=models):
            chosen_model = next((model for model in mods if message.text == model), None)
            if chosen_model:
                price_range = mods[chosen_model]
                bot.send_message(message.chat.id, f"Perfectly! Your choice fell on the watch model {chosen_model}, cost within the limits of {price_range} depending on the configuration. Do you want to place an order now?)", reply_markup=url_markup)

    for company, models in base_watches.items():
        create_company_handler(company, models)

    @bot.message_handler(func=lambda message: message.text == btn0.text)
    def models(message):

        url_markup =  types.InlineKeyboardMarkup()
        url_btns = types.InlineKeyboardButton('PLACE AN ORDER', url='https://mustafapulse.ru/')
        url_markup.add(url_btns)

        bot.send_message(message.chat.id, 'Wow, MustaStyle is your choice! We will be happy to offer you a unique watch that suits your taste, color scheme and budget. Just tell us which watch you prefer by leaving a request on our website, and we will contact you as soon as possible. Trust us to create your perfect time accessory!', reply_markup=url_markup)


bot.polling(none_stop=True)